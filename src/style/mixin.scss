@use 'sass:selector';
@use 'sass:string';
@use 'sass:list';

@mixin prefix($prefix, $name) {
  $prefixselector: string.unquote(".") +
    string.unquote(string.to-lower-case($prefix));
  &#{selector.append($prefixselector,$name)} {
    @content;
  }
}

@mixin subclass($name) {
  #{selector.replace(&,".component","*") + string.unquote($name) } {
    @content;
  }
}

@mixin btn-color($map, $default: #ffffff) {
  @each $name, $colors in $map {
    $plain: selector.append(&, "--is-plain");
    &-#{$name} {
      background-color: list.nth($colors, 1);
      color: list.nth($colors, 2);
      border: {
        width: 0px;
        style: solid;
        color: list.nth($colors, 3);
      };
   
      &#{$plain} {
        background-color: $default !important;
        color: list.nth($colors, 4);
        border-width: 1px;
      }
    }
  }
}

@mixin btn-box($map) {
  @each $name, $sizes in $map {
    &-#{$name} {
      font-size: list.nth($sizes, 1);
      padding: list.nth($sizes, 2) list.nth($sizes, 3);
    }
  }
}

@mixin setposition($top, $left, $bottom: $top, $right: $left) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin clearfix($clean: false) {
  display: table;
  content: "";
  box-sizing: border-box;
  @if $clean {
    clear: both;
  }
}

@mixin card-box($padding, $border: false, $border-color: #dcdcdc) {
  position: relative;
  display: block;
  padding: $padding;
  margin: 0;
  @if $border {
    @include line($border-color);
  }
}

@mixin line($border-color,$position:bottom) {
  border-#{$position}: 1px solid $border-color;
  @media screen and (-webkit-min-device-pixel-ratio: 1.5) {
    border: none;
    background-size: 100% 1px;
    background-repeat: no-repeat;
    background-position: $position;
    background-image: linear-gradient(0,$border-color,$border-color,50%,transparent 50%);
    background-image: -webkit-linear-gradient(90deg,$border-color,$border-color,50%,transparent 50%);
  }
}

@mixin align($map) {
  @each $name, $value in $map {
    @include subclass(string.unquote("-item-") + $name) {
      align-items: $value;
    }
  }
}

@mixin fitmap($map){
  @each $name,$list in $map{
    @include subclass(string.unquote("--fit-") + $name){
      width: list.nth($list,1);
      height: list.nth($list,2);
    }
  }
}

@mixin justify($map) {
  @each $name, $value in $map {
    @include subclass(string.unquote("-content-") + $name) {
      justify-content: $value;
    }
  }
}

@mixin direction($list) {
  @each $prop in $list {
    @include subclass(string.unquote("-") + $prop) {
      flex-direction: $prop;
    }
  }
}

@mixin txt-align($list, $browses) {
  @each $prop in $list {
    @include subclass(string.unquote("-align-") + $prop) {
      text-align: $prop;
      & {
        @include placeholder('placeholder',$browses){
          text-align: $prop;
        }
      }
    }
  }
}

@mixin placeholder($property, $browses,$parent:input) {
  @each $prefix,$list in $browses {
    @if list.nth($list,2) {
    #{selector.append($parent,":"+list.nth($list,1)+$property)} {
        @content;
      }
    } @else {
      #{selector.append($parent,"::"+list.nth($list,1)+$property)} {
        @content;
      }
    }
  }
  #{selector.append($parent,"::"+$property)} {
    @content;
  }
}

@mixin arrow($size, $color, $dir) {
  position: relative;
  &::before,
  &::after {
    position: absolute;
    content: "";
    left: 50%;
    top: 50%;
    width: $size;
    height: 1px;
    background: $color;
    transform-origin: $dir;
    -webkit-transition: all 0.2s;
    -o-transition: all 0.2s;
    transition: all 0.2s;
  }
  &::before {
    transform: translate3d(-50%, -50%, 0) rotate(45deg);
  }
  &::after {
    transform: translate3d(-50%, -50%, 0) rotate(-45deg);
  }
}

@mixin word-align($list,$prefix) {
  @each $prop in $list {
    @include prefix-no-parent($prefix,string.unquote("-text-") + $prop) {
      text-align: $prop !important;
    }
  }
}

@mixin prefix-no-parent($prefix, $name) {
  $prefixselector: string.unquote(".") +
    string.unquote(string.to-lower-case($prefix));
  #{selector.append($prefixselector,$name)} {
    @content;
  }
}

@mixin size($w,$h:$w) {
  width: $w;
  height: $h;
}
